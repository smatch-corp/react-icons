// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as $$String from "rescript/lib/es6/string.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Nodeurl from "node:url";
import * as Core from "@svgr/core";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import IsomorphicFetch from "isomorphic-fetch";

function arrayFromDict(dict) {
  var normalizeName = function (string) {
    return "Icon" + string.replace(/Icon\//, "");
  };
  return Belt_Array.map(Js_dict.entries(dict), (function (param) {
                return [
                        param[0],
                        normalizeName(param[1].name)
                      ];
              }));
}

var NodeUrl = {};

var $$__filename = Nodeurl.fileURLToPath(import.meta.url);

var $$__dirname = Path.dirname($$__filename);

function isNotExist(param) {
  return Fs.existsSync(Path.join($$__dirname, "../src", param[1] + ".tsx")) === false;
}

function downloadSvg(images, icon) {
  var name = icon[1];
  var url = Js_dict.get(images, icon[0]);
  if (url !== undefined) {
    return Caml_option.some(IsomorphicFetch(url, undefined).then(function (prim) {
                      return prim.text();
                    }).then(function (svg) {
                    return [
                            name,
                            $$String.trim(svg)
                          ];
                  }));
  }
  
}

function convertToComponent(param) {
  var name = param[0];
  return Core.transform(param[1], {
                  icon: true,
                  jsxRuntime: "automatic",
                  typescript: true,
                  ref: true
                }).then(function (svg) {
                return svg.replace(/fillOpacity={.+?}/g, "").replace(/fill="((?!none).+?)"/g, "fill=\"currentColor\"").replace(/export default ForwardRef/, "ForwardRef.displayName = '" + name + "'; export { ForwardRef as " + name + " }");
              }).then(function (svg) {
              return [
                      name,
                      svg
                    ];
            });
}

function writeIcon(param) {
  var path = Path.join($$__dirname, "../src", param[0] + ".tsx");
  Fs.writeFileSync(path, param[1], "utf8");
}

function updateIndex(param) {
  var path = Path.join($$__dirname, "../src");
  var partial_arg = /^Icon.+\.tsx$/;
  var index = Belt_Array.map(Belt_Array.keep(Fs.readdirSync(path), (function (param) {
                return partial_arg.test(param);
              })), (function (filename) {
            var componentName = filename.replace(/\.tsx$/, "");
            return "export { " + componentName + " } from './" + componentName + ".js';";
          })).join("\n");
  var path$1 = Path.join(path, "index.ts");
  Fs.writeFileSync(path$1, index, "utf8");
}

export {
  arrayFromDict ,
  NodeUrl ,
  isNotExist ,
  downloadSvg ,
  convertToComponent ,
  writeIcon ,
  updateIndex ,
}
/* __filename Not a pure module */
