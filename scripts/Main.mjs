// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Figma from "./Figma.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as $$String from "rescript/lib/es6/string.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

async function run(param) {
  var data = await Curry._1(Figma.$$Request.QueryComponentsOrInstances.request, undefined);
  var result;
  if (data.TAG === /* Ok */0) {
    var nodes = Js_dict.get(data._0.nodes, process.env.FIGMA_ICON_FRAME_ID);
    result = nodes !== undefined ? nodes.components : Js_exn.raiseError("아이콘 프레임 노드에 접근할 수 없습니다.");
  } else {
    result = Js_exn.raiseError("아이콘 프레임 내의 컴포넌트나 인스턴스 정보를 가져올 수 없습니다.");
  }
  console.log("> 아이콘 컴포넌트 노드 불러옴");
  var icons = Belt_Array.keep(Icon.arrayFromDict(result), Icon.isNotExist);
  console.log("> 작업해야 하는 아이콘 수: " + String(icons.length) + "개");
  var data$1 = await Curry._1(Figma.$$Request.QueryImages.requestWithArgs, icons);
  var images;
  images = data$1.TAG === /* Ok */0 ? data$1._0.images : Js_exn.raiseError("아이콘 이미지 URL을 가져올 수 없습니다.");
  console.log("> SVG 다운로드 주소 가져옴");
  var icons$1 = await Promise.all(Belt_Array.keepMap(icons, (function (param) {
              return Icon.downloadSvg(images, param);
            })));
  console.log("> 다운로드 후 작업할 수 있는 아이콘 수: " + String(icons$1.length) + "개");
  var icons$2 = Belt_Array.keep(icons$1, (function (param) {
          return $$String.trim(param[1]) !== "";
        }));
  console.log("> Trim 작업 후 아이콘 수: " + String(icons$2.length) + "개");
  var icons$3 = await Promise.all(Belt_Array.map(icons$2, Icon.convertToComponent));
  console.log("> 컴포넌트 변환 후 작업할 수 있는 아이콘 수: " + String(icons$3.length) + "개");
  Belt_Array.forEach(icons$3, Icon.writeIcon);
  Icon.updateIndex(undefined);
  console.log("> index.ts 업데이트 완료");
}

run(undefined);

export {
  run ,
}
/*  Not a pure module */
